#include <stdio.h>
#include <stdlib.h>
#include "pico/stdlib.h"

#define MAX_MAP_WIDTH 11

#define X_POS 1
#define Y_POS 2
#define MAP_HEIGHT 3
#define INCREMENT 1
#define DECREMENT 2
#define GET_VALUE 3
#define UPDATE 4
#define SET_NEW_MAP 5

uint variables(uint type, uint action) {
    static uint posX = 5;
    static uint posY = -1;
    static uint mapHeight = 1;

    if (type == X_POS) {
        if (action == INCREMENT) {
            posX++;
        } else if (action == DECREMENT) {
            posX--;
        } else return posX;
    } else if (type == Y_POS) {
        if (action == INCREMENT) {
            posY++;
        } else if (action == DECREMENT) {
            posY--;
        } else return posY;
    } else if (type == MAP_HEIGHT) {
        if (action == INCREMENT) {
            mapHeight++;
        } else return mapHeight;
    }

    return 0;
}

char** map(uint action, char** newMap) {
    static char** map;

    if (action == GET_VALUE) {
        return map;
    } else if (action == UPDATE) {
        uint mapHeight = variables(MAP_HEIGHT, GET_VALUE);
        // Allocate memory for the new dynamic array
        char** newMap = (char**)malloc(mapHeight * sizeof(char*));
        for (int i = 0; i < mapHeight; i++) {
            newMap[i] = (char*)malloc(MAX_MAP_WIDTH * sizeof(char));
            for (int j = 0; j < MAX_MAP_WIDTH; j++) {
                newMap[i][j] = 'X';
            }
        }

        // Copy the existing map to the new map
        for (int i = 0; i < mapHeight - 1; i++) {
            for (int j = 0; j < MAX_MAP_WIDTH; j++) {
                newMap[i][j] = map[i][j];
            }
        }

        // Free the memory of the old map
        for (int i = 0; i < mapHeight - 1; i++) {
            free(map[i]);
        }
        free(map);

        // Update the map and height
        map = newMap;
    } else if (action == SET_NEW_MAP) {
        map = newMap;
    }

    return map;
}

void setMap(uint dir) {
    if (dir == 1) {
        variables(Y_POS, INCREMENT);
    } else if (dir == 2) {
        variables(X_POS, INCREMENT);
    } else if (dir == 3) {
        variables(X_POS, DECREMENT);
    } else {
        variables(Y_POS, DECREMENT);
    }

    if (variables(Y_POS, GET_VALUE) >= variables(MAP_HEIGHT, GET_VALUE)) {
        variables(MAP_HEIGHT, INCREMENT);
        map(UPDATE, NULL);
    }

    map(GET_VALUE, NULL)[variables(Y_POS, GET_VALUE)][variables(X_POS, GET_VALUE)] = ' ';
}

typedef struct {
    int row;
    int col;
} Point;

typedef struct {
    Point point;
    int distance;
} QueueNode;

typedef struct {
    QueueNode* array;
    int front;
    int rear;
    unsigned capacity;
} Queue;

Queue* createQueue(unsigned capacity) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->capacity = capacity;
    queue->front = 0;
    queue->rear = 0;
    queue->array = (QueueNode*)malloc(capacity * sizeof(QueueNode));
    return queue;
}

int isEmpty(Queue* queue) {
    return queue->front == queue->rear;
}

void enqueue(Queue* queue, QueueNode item) {
    queue->array[queue->rear++] = item;
}

QueueNode dequeue(Queue* queue) {
    return queue->array[queue->front++];
}

int isValid(int row, int col) {
    return (row >= 0) && (row < variables(MAP_HEIGHT, GET_VALUE)) && (col >= 0) && (col < MAX_MAP_WIDTH);
}

char** shortestPath(Point start, Point end) {
    int dr[] = {-1, 0, 1, 0};
    int dc[] = {0, 1, 0, -1};

    int ROWS = variables(MAP_HEIGHT, GET_VALUE);
    int COLS = MAX_MAP_WIDTH;

    Queue* queue = createQueue(ROWS * COLS);

    int visited[ROWS][COLS];
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            visited[i][j] = 0;
        }
    }

    visited[start.row][start.col] = 1;

    QueueNode startNode = {.point = start, .distance = 0};
    enqueue(queue, startNode);

    while (!isEmpty(queue)) {
        QueueNode current = dequeue(queue);
        Point currentPoint = current.point;

        if (currentPoint.row == end.row && currentPoint.col == end.col) {

            while (currentPoint.row != start.row || currentPoint.col != start.col) {
                map(GET_VALUE, NULL)[currentPoint.row][currentPoint.col] = '+';
                int direction = visited[currentPoint.row][currentPoint.col] - 1;
                currentPoint.row -= dr[direction];
                currentPoint.col -= dc[direction];
            }
            break;
        }

        for (int i = 0; i < 4; i++) {
            int newRow = currentPoint.row + dr[i];
            int newCol = currentPoint.col + dc[i];

            if (isValid(newRow, newCol) && map(GET_VALUE, NULL)[newRow][newCol] == ' ' && !visited[newRow][newCol]) {
                visited[newRow][newCol] = i + 1;
                QueueNode neighbor = {.point = {.row = newRow, .col = newCol}, .distance = current.distance + 1};
                enqueue(queue, neighbor);
            }
        }
    }

    map(GET_VALUE, NULL)[start.row][start.col] = '+';

    free(queue->array);
    free(queue);

    return map(GET_VALUE, NULL);
}

void getShortestPath(){
    Point start = {.row = 0, .col = 5};
    Point end = {.row = variables(Y_POS, GET_VALUE), .col = variables(X_POS, GET_VALUE)};
    map(SET_NEW_MAP, shortestPath(start, end));
}

void printMap() {
    uint mapHeight = variables(MAP_HEIGHT, GET_VALUE);
    char** currentMap = map(GET_VALUE, NULL);
    for (int y = mapHeight - 1; y >= 0 ; y--) {
        for (int x = MAX_MAP_WIDTH - 1; x >= 0 ; x--) {
            printf("%c ", currentMap[y][x]);
        }
        printf("\n");
    }
}

int main() {

    stdio_init_all();

    map(UPDATE, NULL);

    while (1) {
        char c = getchar();
        switch (c) {
            case 'w':
                setMap(1);
                printMap();
                printf("\n\n");
                break;
            case 'a': {
                setMap(2);
                printMap();
                printf("\n\n");
                break;
            }
            case 's': {
                setMap(4);
                printMap();
                printf("\n\n");
                break;
            }
            case 'd': {
                setMap(3);
                printMap();
                printf("\n\n");
                break;
            }
            case '\n':
            case 'p': {
                getShortestPath();
                printMap();
                printf("\n\n");
                break;
            }
            default:
                break;
        }
    };

    return 0;
}
